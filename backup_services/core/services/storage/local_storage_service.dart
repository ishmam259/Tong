import 'dart:convert';
import 'package:hive_flutter/hive_flutter.dart';
import '../../models/user_identity.dart';
import '../../models/message.dart';
import '../../models/chat_space.dart';

class LocalStorageService {
  static const String _identitiesBoxName = 'identities';
  static const String _messagesBoxName = 'messages';
  static const String _chatSpacesBoxName = 'chat_spaces';
  static const String _settingsBoxName = 'settings';

  late Box<UserIdentity> _identitiesBox;
  late Box<Message> _messagesBox;
  late Box<ChatSpace> _chatSpacesBox;
  late Box<dynamic> _settingsBox;

  bool _initialized = false;

  Future<void> initialize() async {
    if (_initialized) return;

    try {
      // Register adapters
      if (!Hive.isAdapterRegistered(0)) {
        Hive.registerAdapter(UserIdentityAdapter());
      }
      if (!Hive.isAdapterRegistered(1)) {
        Hive.registerAdapter(MessageAdapter());
      }
      if (!Hive.isAdapterRegistered(2)) {
        Hive.registerAdapter(ChatSpaceAdapter());
      }

      // Open boxes
      _identitiesBox = await Hive.openBox<UserIdentity>(_identitiesBoxName);
      _messagesBox = await Hive.openBox<Message>(_messagesBoxName);
      _chatSpacesBox = await Hive.openBox<ChatSpace>(_chatSpacesBoxName);
      _settingsBox = await Hive.openBox<dynamic>(_settingsBoxName);

      _initialized = true;
    } catch (e) {
      throw Exception('Failed to initialize local storage: $e');
    }
  }

  // Identity operations
  Future<void> saveIdentity(UserIdentity identity) async {
    await _identitiesBox.put(identity.id, identity);
  }

  Future<List<UserIdentity>> getIdentities() async {
    return _identitiesBox.values.toList();
  }

  Future<UserIdentity?> getIdentity(String id) async {
    return _identitiesBox.get(id);
  }

  Future<void> deleteIdentity(String id) async {
    await _identitiesBox.delete(id);
  }

  // Message operations
  Future<void> saveMessage(Message message) async {
    await _messagesBox.put(message.id, message);
  }

  Future<List<Message>> getMessages({String? chatSpaceId}) async {
    final messages = _messagesBox.values.toList();
    if (chatSpaceId != null) {
      return messages.where((m) => m.chatSpaceId == chatSpaceId).toList();
    }
    return messages;
  }

  Future<Message?> getMessage(String id) async {
    return _messagesBox.get(id);
  }

  Future<void> deleteMessage(String id) async {
    await _messagesBox.delete(id);
  }

  Future<void> deleteMessagesInChatSpace(String chatSpaceId) async {
    final messages = await getMessages(chatSpaceId: chatSpaceId);
    for (final message in messages) {
      await _messagesBox.delete(message.id);
    }
  }

  // Chat space operations
  Future<void> saveChatSpace(ChatSpace chatSpace) async {
    await _chatSpacesBox.put(chatSpace.id, chatSpace);
  }

  Future<List<ChatSpace>> getChatSpaces() async {
    return _chatSpacesBox.values.toList();
  }

  Future<ChatSpace?> getChatSpace(String id) async {
    return _chatSpacesBox.get(id);
  }

  Future<void> deleteChatSpace(String id) async {
    await _chatSpacesBox.delete(id);
    await deleteMessagesInChatSpace(id);
  }

  // Settings operations
  Future<void> saveSetting(String key, dynamic value) async {
    await _settingsBox.put(key, value);
  }

  Future<T?> getSetting<T>(String key) async {
    return _settingsBox.get(key) as T?;
  }

  Future<void> deleteSetting(String key) async {
    await _settingsBox.delete(key);
  }

  // Utility methods
  Future<String> encodeJson(Map<String, dynamic> data) async {
    return json.encode(data);
  }

  Future<Map<String, dynamic>> decodeJson(String jsonString) async {
    return json.decode(jsonString) as Map<String, dynamic>;
  }

  // Cleanup expired data
  Future<void> cleanupExpiredData() async {
    final chatSpaces = await getChatSpaces();
    final now = DateTime.now();

    for (final chatSpace in chatSpaces) {
      if (chatSpace.isExpired()) {
        await deleteChatSpace(chatSpace.id);
      }
    }
  }

  // Clear all data
  Future<void> clearAll() async {
    await _identitiesBox.clear();
    await _messagesBox.clear();
    await _chatSpacesBox.clear();
    await _settingsBox.clear();
  }

  void dispose() {
    _identitiesBox.close();
    _messagesBox.close();
    _chatSpacesBox.close();
    _settingsBox.close();
    _initialized = false;
  }
}

// Mock adapters for Hive - these will be generated by build_runner
class UserIdentityAdapter extends TypeAdapter<UserIdentity> {
  @override
  final int typeId = 0;

  @override
  UserIdentity read(BinaryReader reader) {
    return UserIdentity.fromJson(Map<String, dynamic>.from(reader.readMap()));
  }

  @override
  void write(BinaryWriter writer, UserIdentity obj) {
    writer.writeMap(obj.toJson());
  }
}

class MessageAdapter extends TypeAdapter<Message> {
  @override
  final int typeId = 1;

  @override
  Message read(BinaryReader reader) {
    return Message.fromJson(Map<String, dynamic>.from(reader.readMap()));
  }

  @override
  void write(BinaryWriter writer, Message obj) {
    writer.writeMap(obj.toJson());
  }
}

class ChatSpaceAdapter extends TypeAdapter<ChatSpace> {
  @override
  final int typeId = 2;

  @override
  ChatSpace read(BinaryReader reader) {
    return ChatSpace.fromJson(Map<String, dynamic>.from(reader.readMap()));
  }

  @override
  void write(BinaryWriter writer, ChatSpace obj) {
    writer.writeMap(obj.toJson());
  }
}
